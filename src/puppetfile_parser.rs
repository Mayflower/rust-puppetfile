// Generated by rust-peg. Do not edit.
#![allow(non_snake_case, unused)]

  use std::num::from_str_radix;
  use std::char;
  use super::*;
  use semver::VersionReq;

fn slice_eq(input: &str, pos: uint, m: &str) -> Result<(uint, ()), uint> {
    #![inline]
    #![allow(dead_code)]
    let l = m.len();
    if input.len() >= pos + l &&
           input.as_bytes().slice(pos, pos + l) == m.as_bytes() {
        Ok((pos + l, ()))
    } else { Err(pos) }
}
fn any_char(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    #![inline]
    #![allow(dead_code)]
    if input.len() > pos {
        Ok((input.char_range_at(pos).next, ()))
    } else { Err(pos) }
}
fn pos_to_line(input: &str, pos: uint) -> uint {
    let mut remaining = pos as int;
    let mut lineno: uint = 1;
    for line in input.lines() {
        remaining -= (line.len() as int) + 1;
        if remaining <= 0 { return lineno; }
        lineno += 1;
    }
    return lineno;
}
fn parse_parse(input: &str, pos: uint) -> Result<(uint, Puppetfile), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = parse___(input, pos);
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res = parse_forge(input, pos);
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, forge)) => {
                                {
                                    let seq_res = parse___(input, pos);
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, _)) => {
                                            {
                                                let seq_res =
                                                    parse_modules(input, pos);
                                                match seq_res {
                                                    Err(pos) => { Err(pos) }
                                                    Ok((pos, modules)) => {
                                                        {
                                                            let match_str =
                                                                input.slice(start_pos,
                                                                            pos);
                                                            Ok((pos,
                                                                Puppetfile{forge:
                                                                               forge,
                                                                           modules:
                                                                               modules,}))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_forge(input: &str, pos: uint) -> Result<(uint, String), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "forge");
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res = parse___(input, pos);
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, _)) => {
                                {
                                    let seq_res = parse_string(input, pos);
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, url)) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Ok((pos, url))
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_modules(input: &str, pos: uint) ->
 Result<(uint, Vec<Module>), uint> {
    {
        let mut repeat_pos = pos;
        let mut repeat_value = vec!();
        loop  {
            let pos = repeat_pos;
            let step_res = parse_module(input, pos);
            match step_res {
                Ok((newpos, value)) => {
                    repeat_pos = newpos;
                    repeat_value.push(value);
                }
                Err(..) => { break ; }
            }
        }
        Ok((repeat_pos, repeat_value))
    }
}
fn parse_module(input: &str, pos: uint) -> Result<(uint, Module), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "mod");
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res = parse___(input, pos);
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, _)) => {
                                {
                                    let seq_res = parse_string(input, pos);
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, name)) => {
                                            {
                                                let seq_res =
                                                    parse___(input, pos);
                                                match seq_res {
                                                    Err(pos) => { Err(pos) }
                                                    Ok((pos, _)) => {
                                                        {
                                                            let seq_res =
                                                                match {
                                                                          let seq_res =
                                                                              slice_eq(input,
                                                                                       pos,
                                                                                       ",");
                                                                          match seq_res
                                                                              {
                                                                              Err(pos)
                                                                              =>
                                                                              {
                                                                                  Err(pos)
                                                                              }
                                                                              Ok((pos,
                                                                                  _))
                                                                              =>
                                                                              {
                                                                                  parse___(input,
                                                                                           pos)
                                                                              }
                                                                          }
                                                                      } {
                                                                    Ok((newpos,
                                                                        value))
                                                                    => {
                                                                        Ok((newpos,
                                                                            Some(value)))
                                                                    }
                                                                    Err(..) =>
                                                                    {
                                                                        Ok((pos,
                                                                            None))
                                                                    }
                                                                };
                                                            match seq_res {
                                                                Err(pos) => {
                                                                    Err(pos)
                                                                }
                                                                Ok((pos, _))
                                                                => {
                                                                    {
                                                                        let seq_res =
                                                                            parse_module_info(input,
                                                                                              pos);
                                                                        match seq_res
                                                                            {
                                                                            Err(pos)
                                                                            =>
                                                                            {
                                                                                Err(pos)
                                                                            }
                                                                            Ok((pos,
                                                                                info))
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        parse___(input,
                                                                                                 pos);
                                                                                    match seq_res
                                                                                        {
                                                                                        Err(pos)
                                                                                        =>
                                                                                        {
                                                                                            Err(pos)
                                                                                        }
                                                                                        Ok((pos,
                                                                                            _))
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let match_str =
                                                                                                    input.slice(start_pos,
                                                                                                                pos);
                                                                                                Ok((pos,
                                                                                                    Module{name:
                                                                                                               name,
                                                                                                           info:
                                                                                                               info,}))
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_module_info(input: &str, pos: uint) ->
 Result<(uint, Vec<PuppetModuleInfo>), uint> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let mut repeat_pos = pos;
                    let mut repeat_value = vec!();
                    loop  {
                        let pos = repeat_pos;
                        let pos =
                            if repeat_value.len() > 0 {
                                let sep_res =
                                    {
                                        let seq_res =
                                            slice_eq(input, pos, ",");
                                        match seq_res {
                                            Err(pos) => { Err(pos) }
                                            Ok((pos, _)) => {
                                                parse___(input, pos)
                                            }
                                        }
                                    };
                                match sep_res {
                                    Ok((newpos, _)) => { newpos }
                                    Err(..) => break ,
                                }
                            } else { pos };
                        let step_res =
                            {
                                let choice_res = parse_version(input, pos);
                                match choice_res {
                                    Ok((pos, value)) => Ok((pos, value)),
                                    Err(..) => parse_info_hash(input, pos),
                                }
                            };
                        match step_res {
                            Ok((newpos, value)) => {
                                repeat_pos = newpos;
                                repeat_value.push(value);
                            }
                            Err(..) => { break ; }
                        }
                    }
                    Ok((repeat_pos, repeat_value))
                };
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, i)) => {
                    {
                        let match_str = input.slice(start_pos, pos);
                        Ok((pos, i))
                    }
                }
            }
        }
    }
}
fn parse_version(input: &str, pos: uint) ->
 Result<(uint, PuppetModuleInfo), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_string(input, pos);
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, version)) => {
                    {
                        let seq_res = parse___(input, pos);
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, _)) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Ok((pos,
                                        Version(VersionReq::parse(version.as_slice()).unwrap())))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_info_hash(input: &str, pos: uint) ->
 Result<(uint, PuppetModuleInfo), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_symbol(input, pos);
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, key)) => {
                    {
                        let seq_res = parse___(input, pos);
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, _)) => {
                                {
                                    let seq_res = slice_eq(input, pos, "=>");
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, _)) => {
                                            {
                                                let seq_res =
                                                    parse___(input, pos);
                                                match seq_res {
                                                    Err(pos) => { Err(pos) }
                                                    Ok((pos, _)) => {
                                                        {
                                                            let seq_res =
                                                                parse_string(input,
                                                                             pos);
                                                            match seq_res {
                                                                Err(pos) => {
                                                                    Err(pos)
                                                                }
                                                                Ok((pos,
                                                                    value)) =>
                                                                {
                                                                    {
                                                                        let seq_res =
                                                                            parse___(input,
                                                                                     pos);
                                                                        match seq_res
                                                                            {
                                                                            Err(pos)
                                                                            =>
                                                                            {
                                                                                Err(pos)
                                                                            }
                                                                            Ok((pos,
                                                                                _))
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let match_str =
                                                                                        input.slice(start_pos,
                                                                                                    pos);
                                                                                    Ok((pos,
                                                                                        ModuleInfo(key,
                                                                                                   value)))
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_symbol(input: &str, pos: uint) -> Result<(uint, String), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, ":");
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res = parse_identifier(input, pos);
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, i)) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Ok((pos, i))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_identifier(input: &str, pos: uint) -> Result<(uint, String), uint> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let start_pos = pos;
                    {
                        let seq_res =
                            {
                                let choice_res = parse_letter(input, pos);
                                match choice_res {
                                    Ok((pos, value)) => Ok((pos, value)),
                                    Err(..) => slice_eq(input, pos, "_"),
                                }
                            };
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, _)) => {
                                {
                                    let seq_res =
                                        {
                                            let mut repeat_pos = pos;
                                            loop  {
                                                let pos = repeat_pos;
                                                let step_res =
                                                    {
                                                        let choice_res =
                                                            parse_letter(input,
                                                                         pos);
                                                        match choice_res {
                                                            Ok((pos, value))
                                                            =>
                                                            Ok((pos, value)),
                                                            Err(..) => {
                                                                let choice_res =
                                                                    parse_digit(input,
                                                                                pos);
                                                                match choice_res
                                                                    {
                                                                    Ok((pos,
                                                                        value))
                                                                    =>
                                                                    Ok((pos,
                                                                        value)),
                                                                    Err(..) =>
                                                                    slice_eq(input,
                                                                             pos,
                                                                             "_"),
                                                                }
                                                            }
                                                        }
                                                    };
                                                match step_res {
                                                    Ok((newpos, value)) => {
                                                        repeat_pos = newpos;
                                                    }
                                                    Err(..) => { break ; }
                                                }
                                            }
                                            Ok((repeat_pos, ()))
                                        };
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, _)) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Ok((pos,
                                                    match_str.to_string()))
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, chars)) => {
                    {
                        let seq_res = parse___(input, pos);
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, _)) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Ok((pos, chars))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_string(input: &str, pos: uint) -> Result<(uint, String), uint> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let choice_res = parse_doubleQuotedString(input, pos);
                    match choice_res {
                        Ok((pos, value)) => Ok((pos, value)),
                        Err(..) => parse_singleQuotedString(input, pos),
                    }
                };
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, string)) => {
                    {
                        let seq_res = parse___(input, pos);
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, _)) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Ok((pos, string))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_doubleQuotedString(input: &str, pos: uint) ->
 Result<(uint, String), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\"");
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        parse_doubleQuotedCharacter(input,
                                                                    pos);
                                    match step_res {
                                        Ok((newpos, value)) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Err(..) => { break ; }
                                    }
                                }
                                Ok((repeat_pos, repeat_value))
                            };
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, s)) => {
                                {
                                    let seq_res = slice_eq(input, pos, "\"");
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, _)) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Ok((pos,
                                                    String::from_chars(s.as_slice())))
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_doubleQuotedCharacter(input: &str, pos: uint) ->
 Result<(uint, char), uint> {
    {
        let choice_res = parse_simpleDoubleQuotedCharacter(input, pos);
        match choice_res {
            Ok((pos, value)) => Ok((pos, value)),
            Err(..) => {
                let choice_res = parse_simpleEscapeSequence(input, pos);
                match choice_res {
                    Ok((pos, value)) => Ok((pos, value)),
                    Err(..) => {
                        let choice_res = parse_zeroEscapeSequence(input, pos);
                        match choice_res {
                            Ok((pos, value)) => Ok((pos, value)),
                            Err(..) => {
                                let choice_res =
                                    parse_hexEscapeSequence(input, pos);
                                match choice_res {
                                    Ok((pos, value)) => Ok((pos, value)),
                                    Err(..) => {
                                        let choice_res =
                                            parse_unicodeEscapeSequence(input,
                                                                        pos);
                                        match choice_res {
                                            Ok((pos, value)) =>
                                            Ok((pos, value)),
                                            Err(..) =>
                                            parse_eolEscapeSequence(input,
                                                                    pos),
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_simpleDoubleQuotedCharacter(input: &str, pos: uint) ->
 Result<(uint, char), uint> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let assert_res =
                        {
                            let choice_res = slice_eq(input, pos, "\"");
                            match choice_res {
                                Ok((pos, value)) => Ok((pos, value)),
                                Err(..) => {
                                    let choice_res =
                                        slice_eq(input, pos, "\\");
                                    match choice_res {
                                        Ok((pos, value)) => Ok((pos, value)),
                                        Err(..) => parse_eolChar(input, pos),
                                    }
                                }
                            }
                        };
                    match assert_res {
                        Err(..) => Ok((pos, ())),
                        Ok(..) => Err(pos),
                    }
                };
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res = any_char(input, pos);
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, _)) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Ok((pos, match_str.char_at(0)))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_singleQuotedString(input: &str, pos: uint) ->
 Result<(uint, String), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\'");
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        parse_singleQuotedCharacter(input,
                                                                    pos);
                                    match step_res {
                                        Ok((newpos, value)) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Err(..) => { break ; }
                                    }
                                }
                                Ok((repeat_pos, repeat_value))
                            };
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, s)) => {
                                {
                                    let seq_res = slice_eq(input, pos, "\'");
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, _)) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Ok((pos,
                                                    String::from_chars(s.as_slice())))
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_singleQuotedCharacter(input: &str, pos: uint) ->
 Result<(uint, char), uint> {
    {
        let choice_res = parse_simpleSingleQuotedCharacter(input, pos);
        match choice_res {
            Ok((pos, value)) => Ok((pos, value)),
            Err(..) => {
                let choice_res = parse_simpleEscapeSequence(input, pos);
                match choice_res {
                    Ok((pos, value)) => Ok((pos, value)),
                    Err(..) => {
                        let choice_res = parse_zeroEscapeSequence(input, pos);
                        match choice_res {
                            Ok((pos, value)) => Ok((pos, value)),
                            Err(..) => {
                                let choice_res =
                                    parse_hexEscapeSequence(input, pos);
                                match choice_res {
                                    Ok((pos, value)) => Ok((pos, value)),
                                    Err(..) => {
                                        let choice_res =
                                            parse_unicodeEscapeSequence(input,
                                                                        pos);
                                        match choice_res {
                                            Ok((pos, value)) =>
                                            Ok((pos, value)),
                                            Err(..) =>
                                            parse_eolEscapeSequence(input,
                                                                    pos),
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_simpleSingleQuotedCharacter(input: &str, pos: uint) ->
 Result<(uint, char), uint> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let assert_res =
                        {
                            let choice_res = slice_eq(input, pos, "\'");
                            match choice_res {
                                Ok((pos, value)) => Ok((pos, value)),
                                Err(..) => {
                                    let choice_res =
                                        slice_eq(input, pos, "\\");
                                    match choice_res {
                                        Ok((pos, value)) => Ok((pos, value)),
                                        Err(..) => parse_eolChar(input, pos),
                                    }
                                }
                            }
                        };
                    match assert_res {
                        Err(..) => Ok((pos, ())),
                        Ok(..) => Err(pos),
                    }
                };
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res = any_char(input, pos);
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, _)) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Ok((pos, match_str.char_at(0)))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_simpleEscapeSequence(input: &str, pos: uint) ->
 Result<(uint, char), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\\");
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res =
                            {
                                let assert_res =
                                    {
                                        let choice_res =
                                            parse_digit(input, pos);
                                        match choice_res {
                                            Ok((pos, value)) =>
                                            Ok((pos, value)),
                                            Err(..) => {
                                                let choice_res =
                                                    slice_eq(input, pos, "x");
                                                match choice_res {
                                                    Ok((pos, value)) =>
                                                    Ok((pos, value)),
                                                    Err(..) => {
                                                        let choice_res =
                                                            slice_eq(input,
                                                                     pos,
                                                                     "u");
                                                        match choice_res {
                                                            Ok((pos, value))
                                                            =>
                                                            Ok((pos, value)),
                                                            Err(..) =>
                                                            parse_eolChar(input,
                                                                          pos),
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };
                                match assert_res {
                                    Err(..) => Ok((pos, ())),
                                    Ok(..) => Err(pos),
                                }
                            };
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, _)) => {
                                {
                                    let seq_res = any_char(input, pos);
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, _)) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Ok((pos,
                                                    match match_str.char_at(1)
                                                        {
                                                        'n' => '\n',
                                                        'r' => '\r',
                                                        't' => '\t',
                                                        x => x,
                                                    }))
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_zeroEscapeSequence(input: &str, pos: uint) ->
 Result<(uint, char), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\\0");
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res =
                            {
                                let assert_res = parse_digit(input, pos);
                                match assert_res {
                                    Err(..) => Ok((pos, ())),
                                    Ok(..) => Err(pos),
                                }
                            };
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, _)) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Ok((pos, 0u8 as char))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_hexEscapeSequence(input: &str, pos: uint) ->
 Result<(uint, char), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\\x");
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res =
                            {
                                let start_pos = pos;
                                {
                                    let seq_res = parse_hexDigit(input, pos);
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, _)) => {
                                            {
                                                let seq_res =
                                                    parse_hexDigit(input,
                                                                   pos);
                                                match seq_res {
                                                    Err(pos) => { Err(pos) }
                                                    Ok((pos, _)) => {
                                                        {
                                                            let match_str =
                                                                input.slice(start_pos,
                                                                            pos);
                                                            Ok((pos,
                                                                from_str_radix::<int>(match_str,
                                                                                      16)))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, value)) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Ok((pos,
                                        char::from_u32(value.unwrap() as
                                                           u32).unwrap()))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_unicodeEscapeSequence(input: &str, pos: uint) ->
 Result<(uint, char), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\\u");
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res =
                            {
                                let start_pos = pos;
                                {
                                    let seq_res = parse_hexDigit(input, pos);
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, _)) => {
                                            {
                                                let seq_res =
                                                    parse_hexDigit(input,
                                                                   pos);
                                                match seq_res {
                                                    Err(pos) => { Err(pos) }
                                                    Ok((pos, _)) => {
                                                        {
                                                            let seq_res =
                                                                parse_hexDigit(input,
                                                                               pos);
                                                            match seq_res {
                                                                Err(pos) => {
                                                                    Err(pos)
                                                                }
                                                                Ok((pos, _))
                                                                => {
                                                                    {
                                                                        let seq_res =
                                                                            parse_hexDigit(input,
                                                                                           pos);
                                                                        match seq_res
                                                                            {
                                                                            Err(pos)
                                                                            =>
                                                                            {
                                                                                Err(pos)
                                                                            }
                                                                            Ok((pos,
                                                                                _))
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let match_str =
                                                                                        input.slice(start_pos,
                                                                                                    pos);
                                                                                    Ok((pos,
                                                                                        from_str_radix::<int>(match_str,
                                                                                                              16)))
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, value)) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Ok((pos,
                                        char::from_u32(value.unwrap() as
                                                           u32).unwrap()))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_eolEscapeSequence(input: &str, pos: uint) ->
 Result<(uint, char), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\\");
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res = parse_eol(input, pos);
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, eol)) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Ok((pos, '\n'))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_digit(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch { '0' ...'9' => Ok((next, ())), _ => Err(pos), }
    } else { Err(pos) }
}
fn parse_hexDigit(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch {
            '0' ...'9' | 'a' ...'f' | 'A' ...'F' => Ok((next, ())),
            _ => Err(pos),
        }
    } else { Err(pos) }
}
fn parse_letter(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    {
        let choice_res = parse_lowerCaseLetter(input, pos);
        match choice_res {
            Ok((pos, value)) => Ok((pos, value)),
            Err(..) => parse_upperCaseLetter(input, pos),
        }
    }
}
fn parse_lowerCaseLetter(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch { 'a' ...'z' => Ok((next, ())), _ => Err(pos), }
    } else { Err(pos) }
}
fn parse_upperCaseLetter(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch { 'A' ...'Z' => Ok((next, ())), _ => Err(pos), }
    } else { Err(pos) }
}
fn parse___(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    {
        let mut repeat_pos = pos;
        loop  {
            let pos = repeat_pos;
            let step_res =
                {
                    let choice_res = parse_whitespace(input, pos);
                    match choice_res {
                        Ok((pos, value)) => Ok((pos, value)),
                        Err(..) => {
                            let choice_res = parse_eol(input, pos);
                            match choice_res {
                                Ok((pos, value)) => Ok((pos, value)),
                                Err(..) => parse_comment(input, pos),
                            }
                        }
                    }
                };
            match step_res {
                Ok((newpos, value)) => { repeat_pos = newpos; }
                Err(..) => { break ; }
            }
        }
        Ok((repeat_pos, ()))
    }
}
fn parse_comment(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    {
        let seq_res = slice_eq(input, pos, "#");
        match seq_res {
            Err(pos) => { Err(pos) }
            Ok((pos, _)) => {
                {
                    let mut repeat_pos = pos;
                    loop  {
                        let pos = repeat_pos;
                        let step_res =
                            {
                                let seq_res =
                                    {
                                        let assert_res =
                                            parse_eolChar(input, pos);
                                        match assert_res {
                                            Err(..) => Ok((pos, ())),
                                            Ok(..) => Err(pos),
                                        }
                                    };
                                match seq_res {
                                    Err(pos) => { Err(pos) }
                                    Ok((pos, _)) => { any_char(input, pos) }
                                }
                            };
                        match step_res {
                            Ok((newpos, value)) => { repeat_pos = newpos; }
                            Err(..) => { break ; }
                        }
                    }
                    Ok((repeat_pos, ()))
                }
            }
        }
    }
}
fn parse_eol(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    {
        let choice_res = slice_eq(input, pos, "\n");
        match choice_res {
            Ok((pos, value)) => Ok((pos, value)),
            Err(..) => {
                let choice_res = slice_eq(input, pos, "\r\n");
                match choice_res {
                    Ok((pos, value)) => Ok((pos, value)),
                    Err(..) => {
                        let choice_res = slice_eq(input, pos, "\r");
                        match choice_res {
                            Ok((pos, value)) => Ok((pos, value)),
                            Err(..) => {
                                let choice_res =
                                    slice_eq(input, pos, "\u2028");
                                match choice_res {
                                    Ok((pos, value)) => Ok((pos, value)),
                                    Err(..) => slice_eq(input, pos, "\u2029"),
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_eolChar(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch {
            '\n' | '\r' | '\u2028' | '\u2029' => Ok((next, ())),
            _ => Err(pos),
        }
    } else { Err(pos) }
}
fn parse_whitespace(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch {
            ' ' | '\t' | '\xa0' | '\ufeff' | '\u1680' | '\u180e' | '\u2000'
            ...'\u200a' | '\u202f' | '\u205f' | '\u3000' => Ok((next, ())),
            _ => Err(pos),
        }
    } else { Err(pos) }
}
pub fn parse(input: &str) -> Result<Puppetfile, String> {
    match parse_parse(input, 0) {
        Ok((pos, value)) => {
            if pos == input.len() {
                Ok(value)
            } else {
                Err(format!("Expected end of input at {}" , pos_to_line
                            ( input , pos )))
            }
        }
        Err(pos) => Err(format!("Error at {}" , pos_to_line ( input , pos ))),
    }
}
